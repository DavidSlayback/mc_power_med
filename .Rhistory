shiny::runApp()
runApp()
corMat <- diag(4)
corMat[1,2] <- corMar[2,1] <- .5
corMat[1,2] <- corMat[2,1] <- .5
corMat
corMat[2,4] <- corMat[4,2] <- .5
corMat
covMat <- corMat
powRep <- function(seed = 1234, Ns = N, covMatp = corMat){
set.seed(seed)
require(MASS)
incProgress(1/powReps)
dat <- mvrnorm(Ns, mu = c(0,0,0,0), Sigma = covMatp)
# Run regressions
m1 <- lm(dat[,2] ~ dat[,1])
m2 <- lm(dat[,3] ~ dat[,1] + dat[,2])
m3 <- lm(dat[,4] ~ dat[,2] + dat[,3] + dat[,1])
# Output parameter estimates and standard errors
a1 <- rnorm(mcmcReps, coef(m1)[2], sqrt(vcov(m1)[2,2]))
a2 <- rnorm(mcmcReps, coef(m2)[2], sqrt(vcov(m2)[2,2]))
b1 <- rnorm(mcmcReps, coef(m3)[2], sqrt(vcov(m3)[2,2]))
b2 <- rnorm(mcmcReps, coef(m3)[3], sqrt(vcov(m3)[3,3]))
d  <- rnorm(mcmcReps, coef(m2)[3], sqrt(vcov(m2)[3,3]))
a1b1 <- a1*b1
a2b2 <- a2*b2
a1db2 <- a1*d*b2
# Calculate confidence intervals
low <- (1 - (conf / 100)) / 2
upp <- ((1 - conf / 100) / 2) + (conf / 100)
LL1 <- quantile(a1b1, low)
UL1 <- quantile(a1b1, upp)
LL2 <- quantile(a2b2, low)
UL2 <- quantile(a2b2, upp)
LLd <- quantile(a1db2, low)
ULd <- quantile(a1db2, upp)
# Is rep significant?
c(LL1*UL1 > 0, LL2*UL2 > 0, LLd*ULd > 0)
}
N = 200
powRep()
powRep <- function(seed = 1234, Ns = N, covMatp = corMat){
set.seed(seed)
require(MASS)
#incProgress(1/powReps)
dat <- mvrnorm(Ns, mu = c(0,0,0,0), Sigma = covMatp)
# Run regressions
m1 <- lm(dat[,2] ~ dat[,1])
m2 <- lm(dat[,3] ~ dat[,1] + dat[,2])
m3 <- lm(dat[,4] ~ dat[,2] + dat[,3] + dat[,1])
# Output parameter estimates and standard errors
a1 <- rnorm(mcmcReps, coef(m1)[2], sqrt(vcov(m1)[2,2]))
a2 <- rnorm(mcmcReps, coef(m2)[2], sqrt(vcov(m2)[2,2]))
b1 <- rnorm(mcmcReps, coef(m3)[2], sqrt(vcov(m3)[2,2]))
b2 <- rnorm(mcmcReps, coef(m3)[3], sqrt(vcov(m3)[3,3]))
d  <- rnorm(mcmcReps, coef(m2)[3], sqrt(vcov(m2)[3,3]))
a1b1 <- a1*b1
a2b2 <- a2*b2
a1db2 <- a1*d*b2
# Calculate confidence intervals
low <- (1 - (conf / 100)) / 2
upp <- ((1 - conf / 100) / 2) + (conf / 100)
LL1 <- quantile(a1b1, low)
UL1 <- quantile(a1b1, upp)
LL2 <- quantile(a2b2, low)
UL2 <- quantile(a2b2, upp)
LLd <- quantile(a1db2, low)
ULd <- quantile(a1db2, upp)
# Is rep significant?
c(LL1*UL1 > 0, LL2*UL2 > 0, LLd*ULd > 0)
}
powRep()
mcmcReps = 20000
powRep()
conf = 95
powRep()
pow <- lapply(sample(1:50000, powReps), powRep)
powReps = 500
pow <- lapply(sample(1:50000, powReps), powRep)
colSums(matrix(unlist(pow), nrow = powReps)) / powReps
unlist(pow)
df <- data.frame("Parameter" = c("a1b1", "a2b2", "a1db2"),
"N" = rep(N, 3),
"Power" = colSums(matrix(unlist(pow), nrow = powReps, byrow = TRUE)) / powReps)
df
runApp()
runApp()
runApp()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='davidslayback', token='3F7324B9889276CA2D7C522CCABD8C3E', secret='U6I9I7fIPZILlxAtLTiVMuQyTDcf0xz6VHTfDCHb')
install.packages('rsconnect')
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
shiny::runApp()
runApp()
mvrnorm
require(MASS)
dat <- mvrnorm(105, mu=c(0,0,0,0,0), Sigma=diag(5))
m1 <- lm(dat[,4] ~ dat[,1] + dat[,2] + dat[,3])
m2 <- lm(dat[,3] ~ dat[,1] + dat[,4])
pest <- c(coef(m1)[2], coef(m2)[2])
covmat <- diag(c((diag(vcov(m1)))[2],
(diag(vcov(m2)))[2]))
View(covmat)
mcmcreps=20000
mcmc <- mvrnorm(mcmcReps, pest, covmat, empirical = FALSE)
mcmc <- mvrnorm(mcmcreps, pest, covmat, empirical = FALSE)
ab <- mcmc[, 1] * mcmc[, 2]
conf=95
low <- (1 - (conf / 100)) / 2
upp <- ((1 - conf / 100) / 2) + (conf / 100)
LL <- quantile(ab, low)
UL <- quantile(ab, upp)
library(shiny); source('run_app.R')
source('run_app.R')
source('run_app.R')
list(
withTags(
table(style = "width: 500px;", id = "correlations_table",
tr(
th(style="padding-top:5px;padding-left:10px;width:40px;"),
th(style="padding-top:5px;", label("X")),
th(style="padding-top:5px;", label("W")),
th(style="padding-top:5px;", label("XW")),
th(style="padding-top:5px;",label("M")),
th(style="padding-top:5px;",label("Y"))
),
tr(
td(style="padding-top:0px;padding-left:10px;width:40px;", label("X")),
td(style="text-align:center", "1.00"),
td(style="padding-top:0px;"),
td(style="padding-top:0px;"),
td(style="padding-top:0px;"),
td(style="padding-top:0px;")
),
tr(
td(style="padding-top:0px;padding-left:10px;width:40px;", label("W")),
td(textInput(inputId = "corwx", label = NULL, value = "0.00")),
td(style="text-align:center", "1.00"),
td(),
td(),
td()
),
tr(
td(style="padding-top:0px;padding-left:10px;width:40px;", label("XW")),
td(textInput(inputId = "corxwx", label = NULL, value = "0.00")),
td(textInput(inputId = "corxww", label = NULL, value = "0.00")),
td(style="text-align:center", "1.00"),
td(),
td()
),
tr(
td(style="padding-top:0px;padding-left:10px;width:40px;", label("M")),
td(textInput(inputId = "cormx", label = NULL, value = "0.00")),
td(textInput(inputId = "cormw", label = NULL, value = "0.00")),
td(textInput(inputId = "cormxw", label = NULL, value = "0.00")),
td(style="text-align:center", "1.00"),
td()
),
tr(
td(style="padding-top:0px;padding-left:10px;width:40px;", label("Y")),
td(textInput(inputId = "coryx", label = NULL, value = "0.00")),
td(textInput(inputId = "coryw", label = NULL, value = "0.00")),
td(textInput(inputId = "coryxw", label = NULL, value = "0.00")),
td(textInput(inputId = "corym", label = NULL, value = "0.00")),
td(style="text-align:center", "1.00")
),
tr(
td(style="padding-top:0px;padding-left:10px;width:40px;", label("Std. Deviation")),
td(textInput(inputId = "SDX", label = NULL, value = "1.00")),
td(textInput(inputId = "SDW", label = NULL, value = "1.00")),
td(style="text-align:center", "NA"),
td(textInput(inputId = "SDM", label = NULL, value = "1.00")),
td(textInput(inputId = "SDY", label = NULL, value = "1.00"))
)
)
)
)
source('run_app.R')
source('run_app.R')
source('run_app.R')
